{"version":3,"sources":["components/StoryCard.js","components/LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["StoryCard","props","className","index","href","url","title","id","score","LoadingSpinner","isLoading","percentageFinished","style","display","App","state","topStories","loadingProgress","this","setState","fetch","then","response","json","storyIds","totalStories","length","storiesDownloaded","storyMetadataPromises","map","toFixed","Promise","all","metadatas","metadata","key","storyMetadata","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qUAgBeA,G,YAXG,SAACC,GACf,OACI,yBAAKC,UAAU,aACX,+BACMD,EAAME,MADZ,WAC0B,uBAAGC,KAAMH,EAAMI,KAAf,IAAsBJ,EAAMK,OADtD,gBAC6E,uBAAGF,KANtE,wCAM4FH,EAAMM,IAA/B,SAE7E,0CAAgBN,EAAMO,MAAtB,eCOGC,G,MAfQ,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,mBACjC,OACI,yBAAKT,UAAU,iBAAiBU,MAAQ,CAAEC,QAASH,EAAY,QAAU,SACrE,yBAAKR,UAAU,cACX,8BAE2B,IAAvBS,EAA2B,yCACvB,uCAAaA,EAAb,SCsDTG,E,kDAtDX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IACDc,MAAQ,CACTC,WAAY,GACZN,WAAW,EACXO,gBAAiB,GALN,E,gEASE,IAAD,OAChBC,KAAKC,SAAS,CAAET,WAAW,IAC3BU,MAfmB,yDAgBdC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAMC,EAAeD,EAASE,OAC1BC,EAAoB,EAClBC,EAAwBJ,EACzBK,KACG,SAAAtB,GAAE,OAAIa,MAAM,8CAAD,OAA+Cb,EAA/C,UACNc,MAAK,SAAAC,GAKF,QAJEK,EACF,EAAKR,SAAS,CACVF,iBAAkBU,EAAkBF,EAAe,KAAKK,QAAQ,KAE7DR,EAASC,aAGhCQ,QAAQC,IAAIJ,GACPP,MAAK,SAAAY,GACFA,EAAYA,EAAUJ,KAAI,SAACK,EAAU/B,GACjC,OAAO,2BAAI+B,GAAX,IAAqB/B,MAAOA,EAAM,EAAGgC,IAAKD,EAAS3B,QAEvD,EAAKY,SAAS,CACVH,WAAYiB,EACZvB,WAAW,Y,+BAO/B,OACI,yBAAKR,UAAU,OACX,kBAAC,EAAD,CAAgBQ,UAAWQ,KAAKH,MAAML,UAAWC,mBAAoBO,KAAKH,MAAME,kBAChF,yBAAKf,UAAU,WACf,yBAAKA,UAAU,QACTgB,KAAKH,MAAMC,WAAWa,KAAI,SAAAO,GAAa,OAAI,kBAAC,EAAcA,OAEhE,yBAAKlC,UAAU,gB,GAlDbmC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90c439aa.chunk.js","sourcesContent":["import React from 'react';\nimport './StoryCard.css';\n\nconst discussionURI = 'https://news.ycombinator.com/item?id=';\n\nconst StoryCard = (props) => {\n    return (\n        <div className='StoryCard'>\n            <p>\n                #{props.index} Title: <a href={props.url}> {props.title}</a> Discussion: <a href={discussionURI + props.id}>link</a>\n            </p>\n            <p> Post score {props.score} points </p>\n        </div>\n    );\n};\n\nexport default StoryCard;\n","import React from 'react';\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = ({ isLoading, percentageFinished }) => {\n    return (\n        <div className=\"LoadingSpinner\" style={ { display: isLoading ? 'block' : 'none' } }>\n            <div className=\"lds-circle\">\n                <div/>\n                {\n                    percentageFinished === 0 ? <p>Loading...</p> : (\n                        <p>Finished {percentageFinished}%</p>\n                    )\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default LoadingSpinner;\n","import React, { Component } from 'react';\nimport './App.css';\nimport StoryCard from \"./components/StoryCard\";\nimport LoadingSpinner from \"./components/LoadingSpinner\";\n\n\nconst hNewsTopStoriesURI = 'https://hacker-news.firebaseio.com/v0/topstories.json';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            topStories: [],\n            isLoading: false,\n            loadingProgress: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ isLoading: true });\n        fetch(hNewsTopStoriesURI)\n            .then(response => response.json())\n            .then(storyIds => {\n                const totalStories = storyIds.length;\n                let storiesDownloaded = 0;\n                const storyMetadataPromises = storyIds\n                    .map(\n                        id => fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n                            .then(response => {\n                                ++storiesDownloaded;\n                                this.setState({\n                                    loadingProgress: (storiesDownloaded/totalStories * 100).toFixed(2)\n                                });\n                                return response.json();\n                            })\n                    );\n                Promise.all(storyMetadataPromises)\n                    .then(metadatas => {\n                        metadatas = metadatas.map((metadata, index) => {\n                            return {...metadata, index: index+1, key: metadata.id};\n                        })\n                        this.setState({\n                            topStories: metadatas,\n                            isLoading: false,\n                        });\n                    });\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <LoadingSpinner isLoading={this.state.isLoading} percentageFinished={this.state.loadingProgress}/>\n                <div className=\"header\"/>\n                <div className=\"body\">\n                    { this.state.topStories.map(storyMetadata => <StoryCard {...storyMetadata} />) }\n                </div>\n                <div className=\"footer\"/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}